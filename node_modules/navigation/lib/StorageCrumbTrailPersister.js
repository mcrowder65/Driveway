var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var CrumbTrailPersister = require('./CrumbTrailPersister');
var StateContext = require('./StateContext');
var settings = require('./settings');
var StorageCrumbTrailPersister = (function (_super) {
    __extends(StorageCrumbTrailPersister, _super);
    function StorageCrumbTrailPersister(maxLength, historySize, storage) {
        if (maxLength === void 0) { maxLength = 500; }
        if (historySize === void 0) { historySize = 100; }
        _super.call(this);
        settings.combineCrumbTrail = true;
        this.maxLength = maxLength;
        this.historySize = historySize;
        this.storage = storage;
        if (!this.storage) {
            try {
                localStorage.setItem('CrumbTrail', 'CrumbTrail');
                localStorage.removeItem('CrumbTrail');
                this.storage = localStorage;
            }
            catch (e) {
                this.storage = new InProcStorage();
            }
        }
    }
    StorageCrumbTrailPersister.prototype.load = function (crumbTrail) {
        if (!crumbTrail)
            return crumbTrail;
        if (crumbTrail && crumbTrail.match(/^[a-z]/i)) {
            var codes = crumbTrail.match(/[a-z]\d*/ig);
            var item = this.storage.getItem('CrumbTrail' + codes[2]);
            if (!item || item.indexOf(codes[0] + codes[1] + '=') !== 0)
                return null;
            return item.substring(item.indexOf('=') + 1);
        }
        return crumbTrail;
    };
    StorageCrumbTrailPersister.prototype.save = function (crumbTrail) {
        if (!crumbTrail)
            return crumbTrail;
        if (crumbTrail.length > this.maxLength) {
            var count = 0;
            if (this.storage.getItem('CrumbTrailCount') != null)
                count = +this.storage.getItem('CrumbTrailCount');
            var dialogCode = StorageCrumbTrailPersister.toCode(StateContext.dialog.index);
            var stateCode = StorageCrumbTrailPersister.toCode(StateContext.state.index);
            var countCode = StorageCrumbTrailPersister.toCode(count % (10 * this.historySize));
            if (count >= this.historySize) {
                var purgeCode = StorageCrumbTrailPersister.toCode((count - this.historySize) % (10 * this.historySize));
                this.storage.removeItem('CrumbTrail' + purgeCode);
            }
            this.storage.setItem('CrumbTrail' + countCode, dialogCode + stateCode + '=' + crumbTrail);
            this.storage.setItem('CrumbTrailCount', (count + 1).toString());
            return dialogCode + stateCode + countCode;
        }
        return crumbTrail;
    };
    StorageCrumbTrailPersister.toCode = function (val) {
        var rem = val % 52;
        var div = Math.floor(val / 52);
        return String.fromCharCode((rem < 26 ? 97 : 39) + rem) + (div ? div.toString() : '');
    };
    return StorageCrumbTrailPersister;
})(CrumbTrailPersister);
var InProcStorage = (function () {
    function InProcStorage() {
        this.store = {};
    }
    InProcStorage.prototype.clear = function () { throw new Error('Not implemented'); };
    InProcStorage.prototype.key = function (index) { throw new Error('Not implemented'); };
    InProcStorage.prototype.getItem = function (key) {
        return this.store[key];
    };
    InProcStorage.prototype.setItem = function (key, value) {
        this.store[key] = value;
    };
    InProcStorage.prototype.removeItem = function (key) {
        delete this.store[key];
    };
    return InProcStorage;
})();
module.exports = StorageCrumbTrailPersister;
